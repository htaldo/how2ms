LOADING STRUCTURES
commonly, structures are loaded with a pattern like this: #925, #144
	const plugin = this.plugin;
	const data = await plugin.builders.data.download({ url: 'https://alphafold.ebi.ac.uk/files/AF-Q8W3K0-F1-model_v4.cif' }, { state: { isGhost: false } });
	const trajectory = await plugin.builders.structure.parseTrajectory(data, 'mmcif');
	const model = await plugin.builders.structure.createModel(trajectory);
	const structure = await plugin.builders.structure.createStructure(model);

yet another example is given in #68
	const data = await this.plugin.builders.data.download({ url });
	const trajectory = await this.plugin.builders.structure.parseTrajectory(data, format);
	const model = await this.plugin.builders.structure.createModel(trajectory);
	const structure = await this.plugin.builders.structure.createStructure(model);

and another in #250
	const data = await plugin.builders.data.download({ url: Asset.Url(url) });
	const trajectory = await plugin.builders.structure.parseTrajectory(data, format);
	const model = await plugin.builders.structure.createModel(trajectory);
	const structure = await plugin.builders.structure.createStructure(model, assemblyId ? { name: 'assembly', params: { id: assemblyId } } : void 0);
This is to create/load the structure only #144. To apply a representation preset: #925
	await plugin.builders.structure.representation.applyPreset(struct, nameOfThePreset);

from https://molstar.org/docs/transforms/custom-trajectory/
	using a custom transformer to process the data:
		const data: CustomTrajectoryData = await (await fetch(url)).json();
		const trajectory = await plugin.build().toRoot().apply(TrajectoryFromCustomData, { data }).commit();
		// Create the representation
		await plugin.builders.structure.hierarchy.applyPreset(trajectory, 'default');

LOADING TRAJECTORY FROM STRING #37
Mol* can also load data from string:
		const data = await plugin.builders.data.rawData({
			data: '' /* string or number[] */,
			label: void 0 /* optional label */
		});
		const trajectory = await plugin.builders.structure.parseTrajectory(data, format);
		await plugin.builders.structure.hierarchy.applyPreset(trajectory, 'default');
	loadStructureFromData is also available in the Viewer object
when you load a trajectory, each frame is a different structure #461

NOTE:
Unfortunately, loading the structure using loadStructureFrom* makes it kind of hard to customize the loaded data by code. #131
loadStructureFromUrl is a promise. If you call two of these at the same time, there might be some conflict in the app state. #388
	Instead, load one after the other like this:
		async function loadAll(plugin, urls) {
  			for (const url of urls) await plugin.loadStructureFromUrl(url);
		}
on the backend, you can't change the name of the loaded structure using the PDB format (with mmCIF you could assign entry.id category) #388

EXAMPLES
loadStructureFromUrl(`http://localhost:3000/api/pivot/gene/pdb-file/${pdbFileName}`, 'pdb' );
viewer.loadStructureFromUrl('pathtomystructure', 'pdb', false, { representationParams: {theme: { carbonColor: 'element-symbol' }}})
	
EXTRA
definition of loadStructureFromUrl in app.ts
related functions
	loadAllModelsOrAssemblyFromUrl
	loadStructureFromData
	loadPdb
in basic-wrapper/index.ts
	async load
definition of DownloadStructure (mol-plugin-state/actions/structure.ts)
