THE UPDATE PATTERN
In general, the state is built though plugin.build() and applying a series of transforms and updates. This is what creates the "JSON" description of the state which is the "reconciled" similar to how react works when updating the DOM.
you can batch many updates in a single commit too. If you search the source for .build() there will be some examples of that. #301

build,update,to,apply,commit
	pluing.build().to(selector).update(createStructureRepresentationParams(...));
const update = plugin.build() or plugin.state.build()
update
	.toRoot()
	.to(selection, selector, structure, repr, transform, cell)
		.apply //apply a transform, can be done on another apply #209, and the transform can be a custom one made via CreateTransformer
		.group
		.update (?)
			.commit
await update.commit();
---
you can finish a function with return update.commit(); #149
when/why can update be a function argument? like in #264
	update: StateBuilder.To<any, any>
#664 may be of help

UPDATE MULTIPLE TRANSFORMS
you can update multiple transforms at the same time like this: #134
	const refsOrSelectors = ...;
	const update = pluing.build();
	for (const r of refsOrSelectors) {
	  update.to(r).update(...);
	}
	await update.commit()

REMOVE LOADED PDB FROM SESSION #454
When you load the PDB file you should get a reference to the root (usually the download transform)
You can then do something like this:
const update = molstar.build();
	for (const ref of roots) update.delete();
	await update.commit();

EXAMPLES
an approach to change any paramaters about the visuals #298
	this can be used to change a representation type to another (cartoon to gaussian surface, etc)

example:
	### INIT function, e.g. in useEffect
	const ref = await window.molstar.builders.data.download(
		{url: `URLTOPDBFILE`},
		{state: {isGhost: true},}
	);
	const trajectory =
		await window.molstar.builders.structure.parseTrajectory(data, "pdb");
	await window.molstar.builders.structure.hierarchy.applyPreset(
		trajectory,
		"default"
	);

	### FUNCTION for deleting
	const update = molstar.build();
	update.delete(ref); # this is the ref from above
	await update.commit();
