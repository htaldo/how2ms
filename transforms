refer to https://github.com/molstar/molstar/tree/master/docs/state
one of the most common use cases for transforms is loading a structure from a file, string or url

APPLY, PARAMS AND PROPS
transforms are classes applied via .apply()
the transform definitions declare the data types they take and return, via the keys from and to
	for example in mol-plugin-state/transforms/model.js
		var StructureRepresentation3D = PluginStateTransform.BuiltIn({
			name: 'structure-representation-3d',
			display: '3D Representation',
			from: SO.Molecule.Structure,
			to: SO.Molecule.Structure.Representation3D,
			...
apply takes a transform, params (optional) and props (optional)
	can also be found as apply(ref, params, plugin)
params can be defined in the transform's signature
	for example in examples/alpha-orbitals/index.js, 
		polymer = structure.apply(StructureComponent, { type: { name: 'static', params: 'polymer' } });
		ligand = structure.apply(StructureComponent, { type: { name: 'static', params: 'ligand' } });
	StructureComponent is defined like this (mol-plugin-state/transforms/model.js). params is the last key there:
		var StructureComponent = PluginStateTransform.BuiltIn({
			name: 'structure-component',
			display: { name: 'Component', description: 'A molecular structure component.' },
			from: SO.Molecule.Structure,
			to: SO.Molecule.Structure,
			params: StructureComponentParams
		})
params can also be defined as a function inside the transform, returning the actual params that can be used for the transform
	for example (examples/alpha-orbitals/index.js)
		polymer.apply(StructureRepresentation3D, {
			type: { name: 'cartoon', params: { alpha: 1 } },
			colorTheme: { name: 'sequence-id', params: {} },
		});
	StructureRepresentation3D has return type (in mol-plugin-state/transforms/representation.js):
		return ({
            type: PD.Mapped(registry.default.name, registry.getApplicableTypes(a.data), function (name) { return PD.Group(registry.get(name).getParams(themeCtx, a.data)); }),
            colorTheme: PD.Mapped(type.defaultColorTheme.name, themeCtx.colorThemeRegistry.getApplicableTypes(dataCtx), function (name) { return PD.Group(themeCtx.colorThemeRegistry.get(name).getParams(dataCtx)); }, colorThemeInfo),
            sizeTheme: PD.Mapped(type.defaultSizeTheme.name, themeCtx.sizeThemeRegistry.getApplicableTypes(dataCtx), function (name) { return PD.Group(themeCtx.sizeThemeRegistry.get(name).getParams(dataCtx)); })
        });

TYPES OF PARAMS

TRANSFORM EVENT DATA #95

TRANSFORM TO ADD FRAMES TO A TRAJECTORY FROM COORDINATES ARRAY #282

PARSING DATA WITH TRANSFORMERS #730
const format = plugin.build()
	.to(data)
	.apply(StateTransforms.Data.ParseCcp4, {}, { state: { isGhost: true } });
const volume = format.apply(StateTransforms.Volume.VolumeFromCcp4, { entryId: params?.entryId });
await format.commit({ revertOnError: true });

EXAMPLES
an example can be found in #146

another example #82
export const CreateSphere = CreateTransformer({
    name: 'create-sphere',
    display: 'Sphere',
    from: PluginStateObject.Root, // or whatever data source
    to: PluginStateObject.Shape.Representation3D,
    params: {
        center: PD.Vec3(Vec3()),
        radius: PD.Numeric(1)
    }
}) ({...});
//then do plugin.build().toRoot().apply(CreateSphere, { ... }).commit()



MORE
#443
#431
